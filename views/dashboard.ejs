<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
<!-- CSS only -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
  integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
<!-- CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/simple-notify@0.5.4/dist/simple-notify.min.css" />

  <link rel="stylesheet" href="/css/style.css" />
  <title>Welcome</title>
</head>
<body>
    <nav class="navbar navbar-light" style="background-color: #ea9598;">
      <div class="container">
        <a class="navbar-brand" href="#">Balance Life</a>      
        <a href="#" class="btn btn-warning" onclick="Logout()" id="logout">Logout</a>
      </div>
    </nav>
    <div class="container">
      <div class="card mt-4 mb-5 green_bg">
        <div class="card-body">
          <h3>Welcome <span id="user_name"></span>..!</h3>
        </div>
      </div>
      <div class="card mt-5">
        <div class="card-body">
          <h3>Configure Your Daily Routine</h3>
        </div>
      </div>
      <div class="row">
        <div class="col-md-3">
          <div class="card mt-2 mb-5">
            <div class="card-body">
              <h5>Working Hours</h5>
                <a class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#exampleModal" id="wh_bt">Add Working Hours</a>
                <p id="sh" class="pt-2"></p>
                <p id="eh"></p>
            </div>
          </div>
          <!-- Working Hour Modal -->
          <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <form name="wh_frm" id="wh_frm">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <h5 class="modal-title" id="exampleModalLabel">Work Hours</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                  <div class="row">
                    <div class="col-md-6">
                        <label for="start_hour" class="form-label">Starting Hours</label>
                        <input type="time" class="form-control" name="start_hour" id="start_hour"  required/>
                    </div>
                    <div class="col-md-6">
                      <label for="end_hour" class="form-label">Ending Hours</label>
                      <input type="time" class="form-control" name="end_hour" id="end_hour" required />
                    </div>
                  </div>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                  <button type="submit" class="btn btn-warning">Save Settings</button>
                </div>
              </div>
            </div>
            </form>
          </div>
        </div>
        <div class="col-md-3">
          <div class="card mt-2 mb-5">
            <div class="card-body">
              <h5>Daily Reminder</h5>
              <a class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#exampleModal2">Daily Reminder</a>
                <p id="br" class="pt-2"></p>
                <p id="wr"></p>
            </div>
          </div>
          <!-- Daily Reminder Hour Modal -->
          <div class="modal fade" id="exampleModal2" tabindex="-1" aria-labelledby="exampleModalLabel2" aria-hidden="true">
            <form name="reminder_frm" id="reminder_frm">
              <div class="modal-dialog">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel2">Reminder Schedule</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <div class="row">
                      <div class="col-md-6">
                        <label for="break_reminder" class="form-label">Break Reminder (Minutes)</label>
                        <select name="break_setting" id="break_setting" class="form-control">
                          <option value="20">20</option>
                          <option value="30">30</option>
                          <option value="30">30</option>
                        </select>
                      </div>
                      <div class="col-md-6">
                        <label for="water_intake" class="form-label">Water Intake (Minutes)</label>
                          <select name="water_intake" id="water_intake" class="form-control">
                            <option value="20">20</option>
                            <option value="30">30</option>
                            <option value="30">30</option>
                          </select>
                      </div>
                    </div>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-warning">Save Setting</button>
                  </div>
                </div>
              </div>
            </form>
          </div>
        </div>
        <div class="col-md-3">
          <div class="card mt-2 mb-5">
            <div class="card-body">
              <h5>Inspirational Quotes</h5>
              <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="in_quote" value="1">
                <label class="form-check-label" for="in_quote">Enable</label>                
              </div>
              <p class="small">Every 2 hour</p>
            </div>
          </div>
        </div>
        <div class="col-md-3">
          <div class="card mt-2 mb-5">
            <div class="card-body">
              <h5>Health Alerts</h5>              
                <div class="form-check form-switch">
                  <input class="form-check-input" type="checkbox" role="switch" id="health_quote">
                  <label class="form-check-label" for="health_quote">Enable</label>                  
                </div>
                <p class="small">Every 1 hour</p>
            </div>
          </div>
        </div>
      </div>
    </div>

</body>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js"
  integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js"
  integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13" crossorigin="anonymous"></script>
<!-- JS -->
<script src="https://cdn.jsdelivr.net/npm/simple-notify@0.5.4/dist/simple-notify.min.js"></script>
<script>
    let user_name = document.querySelector('#user_name');
    let wh_bt = document.querySelector('#wh_bt');
    let sh = document.querySelector('#sh');
    let eh = document.querySelector('#eh');
    let logout = document.querySelector('#logout');
    let br = document.querySelector('#br');
    let wr = document.querySelector('#wr');    
    let user;
    window.onload = function () {
      user = JSON.parse(window.localStorage.getItem('user'));
      if(user == null)
       location.assign('/')
      else
      {
        user_name.textContent = user.name
        wh_bt.textContent = user.start_hour == null?'Add Working Hours': 'Update Working Hours'
        sh.innerHTML = user.start_hour != null?'Start Hour : <b>' + user.start_hour+'</b>':'';
        eh.innerHTML = user.start_hour != null?'End Hour : <b>' + user.end_hour+'</b>':'';

        if(user.reminder != undefined)
        {
          wh_bt.textContent = 'Update Working Hours'
          br.innerHTML =  'Break (every)  : <b>' + JSON.stringify(user.reminder[0].break_reminder_interval)+ ' Minutes</b>' ;
          wr.innerHTML = 'Water Intake (every)<b> : ' + JSON.stringify(user.reminder[0].water_intake_interval) + ' Minutes</b>';         
        }

         if (user.quote_reminder != undefined) {
          let in_quote =document.querySelector("#in_quote")
          let health_quote = document.querySelector("#health_quote")
          user.quote_reminder.forEach(item => {
            if(item.quote_type_id==1)
              {
                in_quote.checked = true
              }  
            else
              health_quote.checked = true

          });
         } 
      }  
      


      //setInterval(createNotification('Break Reminder'), 300000);

      getQuotes()
      if(user.reminder ==undefined)
      {
        getReminders().then((data)=>{
          if(data.length)
          {
            user['reminder'] = data;
            window.localStorage.setItem('user', JSON.stringify(user));
            location.reload()
          }  
        })
      }
      if (user.quote_reminder == undefined) {
        getQuoteSettings().then((data) => {
          if (data.length) {
            user['quote_reminder'] = data;
            window.localStorage.setItem('user', JSON.stringify(user));
            
          }
        })
      }
      if (user.endpoint_registered == undefined)
      installServiceWorker()
    }  
      // Working Hour Function Start
      const reminder_form = document.querySelector('#reminder_frm')
      const break_setting = document.querySelector('#break_setting')
      const water_intake = document.querySelector('#water_intake')

      reminder_form.addEventListener('submit', async (e) => {
        e.preventDefault()
        try {
          const res = await fetch('/api/addReminder', {
            method: 'POST',
            body: JSON.stringify({ 
              user_id: user.user_id, 
              break_reminder_interval: break_setting.value, 
              water_intake_interval: water_intake.value
             }),
            headers: { 'Content-Type': 'application/json' }
          })
          const data = await res.json()
          if (res.status === 400 || res.status === 401) {
            //display.style.display = "block";
            alert(`${data.error}`);
          }
          console.log(data)
          if (data.msg == 'success') {

            location.reload();
          }

        } catch (err) {
          console.log(JSON.stringify(err))
        }
      });  
      // Working Hour function end

      // Remnder function etart
        const form = document.querySelector('#wh_frm')
        const start_time = document.querySelector('#start_time')
        const end_time = document.querySelector('#end_time')

        form.addEventListener('submit', async (e) => {
          e.preventDefault()
          try {
            const res = await fetch('/api/addWorkHours', {
              method: 'POST',
              body: JSON.stringify({ user_id: user.user_id, start_hour: start_hour.value, end_hour: end_hour.value }),
              headers: { 'Content-Type': 'application/json' }
            })
            const data = await res.json()
            if (res.status === 400 || res.status === 401) {
              //display.style.display = "block";
              alert(`${data.error}`);
            }
            console.log(data)
            if (data.msg == 'success') {

              user['start_hour'] = data.start_hour;
              user['end_hour'] = data.end_hour;
              window.localStorage.setItem('user', JSON.stringify(user));
              location.reload();
            }

          } catch (err) {
            console.log(JSON.stringify(err))
          }
        });
      // Reminder function end      

      logout.addEventListener('click',(e) => {
        e.preventDefault();
        window.localStorage.clear();
        location.assign('/')
      })
      {

      }
    // get Quotes  
    const getQuotes = async () => {
      const res = await fetch('/api/getQuotes')
      const data = await res.json()
      console.log(data);
    }
    
    const getReminders = async () => {
      const res = await fetch('/api/getReminders', {
        method: 'POST',
        body: JSON.stringify({ user_id: user.user_id }),
        headers: { 'Content-Type': 'application/json' }
      })
      const data = await res.json()
      if (res.status === 400 || res.status === 401) {
        alert(`${data.error}`);
      }
      else{
        console.log(data)
        return data;
      }
    }

  const registerServiceWorker = async () => {
    const swRegistration = await navigator.serviceWorker.register("service_worker.js",{scope:'./'});
    let publicVapidKey = "BL6erwrQLf-x6q5uDT-iAthajQK9T5hSBRwl9S174cya_S7j3CURXPCPMEuTY_2rA3j46FCwEdH_Opm3YSe-4BM"
    await navigator.serviceWorker.ready; // Here's the waiting

    // Registering push
    const subscription = await swRegistration.pushManager.subscribe({
      userVisibleOnly: true,
      applicationServerKey: urlB64ToUint8Array(publicVapidKey)
    })
    .catch((err) => { return console.log('[Web Push] Registration Error:', err) });
      console.log('[Web Push] Registered');      
  
    };
    
    const requestNotificationPermission = async () => {
      const permission = await window.Notification.requestPermission();
      // value of permission can be 'granted', 'default', 'denied'
      // granted: user has accepted the request
      // default: user has dismissed the notification permission popup by clicking on x
      // denied: user has denied the request.
      if (permission !== "granted") {
        //alert("Permission not granted for Notification")
        throw new Error("Permission not granted for Notification");
      }
    };

    const installServiceWorker = async () => {
      const permission = await requestNotificationPermission();
      const swRegistration = await registerServiceWorker();
      window.navigator.serviceWorker.ready.then(function (serviceWorkerRegistration) {

        serviceWorkerRegistration.pushManager.getSubscription()
          .then(function (subscription) {

           console.log(subscription)

            if (!subscription) {

              return;
            }
            // Keep your server in sync with the latest subscriptionId
            user['endpoint_registered'] = true;
            window.localStorage.setItem('user', JSON.stringify(user));
            sendSubscriptionToServer(JSON.stringify(subscription));
          })
          .catch(function (err) {
            console.log('Error during getSubscription()', err);
          });
      });

};
  
  sendSubscriptionToServer = async (subscription) => {
      const res = await fetch('/api/addSubscription', {
        method: 'POST',
        body: JSON.stringify({ user_id: user.user_id,push_endpoint:subscription }),
        headers: { 'Content-Type': 'application/json' }
      })
      const data = await res.json()
      if (res.status === 400 || res.status === 401) {
        alert(`${data.error}`);
      }
      else {
        console.log(data)
      }
    }
  const urlB64ToUint8Array = base64String => {
    const padding = "=".repeat((4 - (base64String.length % 4)) % 4);
    const base64 = (base64String + padding)
      .replace(/\-/g, "+")
      .replace(/_/g, "/");
    const rawData = atob(base64);
    const outputArray = new Uint8Array(rawData.length);
    for (let i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
  };
  //Inpiration Quote Start
  let in_quote = document.querySelector("#in_quote");
  in_quote.addEventListener('change',async (e)=>{
    let status = in_quote.checked ? 1 : 0;
    const res = await fetch('/api/subscribeInspirationalQuote', {
      method: 'POST',
      body: JSON.stringify({ user_id: user.user_id, status: status, quote_type_id: 1 }),
      headers: { 'Content-Type': 'application/json' }

    });
    let data = await res.json

    if (res.status == 400 || res.status == 401 || res.status == 500) {
      alert(`${data.error}`);
    }
    else {
      notify()
      console.log(data)
       getQuoteSettings().then((data) => {
        if (data.length) {
          user['quote_reminder'] = data;
          window.localStorage.setItem('user', JSON.stringify(user));
        }
        else
        {
          user['quote_reminder'] = undefined;
          window.localStorage.setItem('user', JSON.stringify(user));
        }  
      })
    }
  })
   //Health Quote Start
  let health_quote = document.querySelector("#health_quote");
   health_quote.addEventListener('change', async (e) => {
    let status = health_quote.checked ? 1 : 0;    
    const res = await fetch('/api/subscribeHealthQuote',{
      method : 'POST',
      body : JSON.stringify({user_id:user.user_id,status:status,quote_type_id:2}),
      headers:{ 'Content-Type': 'application/json' }

    });
    let data = await res.json

    if(res.status == 400 || res.status == 401 || res.status == 500 )
    {
      alert(`${data.error}`);
    }
    else
    {
      console.log(data)
      notify()
      getQuoteSettings().then((data) => {
        if (data.length) {
          user['quote_reminder'] = data;
          window.localStorage.setItem('user', JSON.stringify(user));
        }
        else
        {
          user['quote_reminder'] = undefined;
          window.localStorage.setItem('user', JSON.stringify(user));
        }  
      })
    }

  });
  const getQuoteSettings = async () => {
    const res = await fetch('/api/getQuoteSettings', {
      method: 'POST',
      body: JSON.stringify({ user_id: user.user_id }),
      headers: { 'Content-Type': 'application/json' }
    })
    const data = await res.json()
    if (res.status === 400 || res.status === 401) {
      alert(`${data.error}`);
    }
    else {
      console.log(data)
      return data;
    }
  } 
  function notify()
  {
    new Notify({
      status: 'success',
      title: 'Quote Setting',
      text: 'Quote Setting updated!',
      effect: 'fade',
      speed: 300,
      customClass: '',
      customIcon: '',
      showIcon: true,
      showCloseButton: true,
      autoclose: true,
      autotimeout: 3000,
      gap: 20,
      distance: 20,
      type: 1,
      position: 'right top'
    })
  }
</script>
</html>