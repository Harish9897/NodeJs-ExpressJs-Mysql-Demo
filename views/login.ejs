<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
<!-- CSS only -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
  integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
  <link rel="stylesheet" href="/css/style.css" />
  <title>Login</title>
</head>
<body>

  <div class="container">

     <h1 class="pt-5 mt-5 text-center ">Welcome to Balance Life</h1>
    <h3 class="pt-5 text-center">Login</h1>
    <div class="row justify-content-center">
      <div class="col-md-4">
        <div class="card mt-2 mb-5">          
            <form name="login_frm" id="login_frm">
              <div class="error m-2 p-2 text-white" style="background-color: red;"></div>
              <div class="card-body">
                <label for="inputEmail4" class="form-label">Email</label>
                <input type="email" class="form-control" id="email" required>
                <label for="inputEmail4" class="form-label pt-4">Password</label>
                <input type="password" class="form-control" id="password" required>
              </div>
              <div class="card-body">
                <button type="submit" class="  btn btn-warning">Login</button>
                Don't have an accout? <a href="/register">Register</a>
              </div>
            </form>          
        </div>
        
      </div>
    </div>
  </div>

</body>
<script>
  const form = document.querySelector('#login_frm')
  const email = document.querySelector('#email')
  const password = document.querySelector('#password')
  const display = document.querySelector('.error')
  display.style.display = "none";
  
  form.addEventListener('submit', async (e) => {
      e.preventDefault()
      display.textContent = ''
    try {
        const res = await fetch('/api/login', {
        method: 'POST',
        body: JSON.stringify({ email: email.value, password: password.value }),
        headers: {'Content-Type': 'application/json' }
            })
            const data = await res.json()
            if (res.status === 400 || res.status === 401) {
              display.style.display = "block";
              return display.textContent = `${data.message}. ${data.error ? data.error : ''}`
            }
            console.log(data)
            if(data.msg =='not_found')
            {
              display.style.display = "block";
              return display.textContent = `User does not exist!`
              
            }
            else
            {
              const user = {
                name: data.name,
                email: data.email,
                start_hour: data.start_hour,
                end_hour: data.end_hour,
                user_id: data.id
              }

              window.localStorage.setItem('user', JSON.stringify(user));
              location.assign('/dashboard')
            }  
          } catch (err) {
            console.log(err.message)
          }
        })

    function askNotificationPermission() {
      // function to actually ask the permissions
      function handlePermission(permission) {
        // Whatever the user answers, we make sure Chrome stores the information
        if (!('permission' in Notification)) {
          Notification.permission = permission;
        }

      }

      // Let's check if the browser supports notifications
      if (!"Notification" in window) {
        alert("This browser does not support notifications.");
        console.log("This browser does not support notifications.");
      } else {
        if (checkNotificationPromise()) {
          Notification.requestPermission()
            .then((permission) => {
              handlePermission(permission);
            })
        } else {
          Notification.requestPermission(function (permission) {
            handlePermission(permission);
          });
        }
      }
    }
    // Function to check whether browser supports the promise version of requestPermission()
    // Safari only supports the old callback-based version
    function checkNotificationPromise() {
      try {
        Notification.requestPermission().then();
      } catch (e) {
        return false;
      }

      return true;
    }  
    askNotificationPermission()  
</script>
</html>